@page "/Settings/Theme"
@inherits AppComponentBase;

<FxToolBar
    IsInRoot="false"
    IsBackButtonVisible="true" 
    IsAddButtonVisible="false"
    IsOverflowButtonVisible="false"
    OnBackClick="HandleToolbarBack"/>

@if (_isLoaded)
{
    <div class="theme-content">
        @($"Use System Theme ({SystemTheme})")
        <BitCheckbox @bind-Value="@IsSystemTheme" OnChange="@OnUseSystemThemeAsync" />
        Dark Theme
        <BitToggle @bind-Value="@IsDarkMode" IsEnabled="@(!IsSystemTheme)" OnChange="@OnThemeChangedAsync" />
    </div>
}

<button onclick="@(async ()=>await ShowProgressModal())">Test</button>
<ProgressModal @ref="_prgressModalRef"/>
<!-- Progressbar sample -->
@*<div style="padding: 21px">
    <BitProgressIndicator 
        BarHeight="4"
        Label="Example title"
        Description="@description"
        PercentComplete="@CompletedPercent" />
    <div class="progress-dsc">
        <p>1 of 2</p>
        <p>@description</p>
    </div>

    <FxButton
        Width="150px"
        Margin="16px 0"
        Text="Start Progress"
        OnClick="@StartProgress"
        ButtonStyle="FxButtonStyle.Normal" />
</div>*@

@code {
    //private string description = "Push button to start!";
    //public int CompletedPercent { get; set; }
    //private async Task StartProgress()
    //{
    //    CompletedPercent = 0;
    //    while (CompletedPercent <= 100)
    //    {
    //        if (CompletedPercent == 100)
    //        {
    //            description = $"Completed !";
    //            break;
    //        }
    //        else
    //        {
    //            CompletedPercent++;
    //            description = $"{CompletedPercent}%";
    //        }

    //        StateHasChanged();
    //        await Task.Delay(100);
    //    }
    //}
    private ProgressModal _prgressModalRef;

    private async Task ShowProgressModal()
    {
        if(_prgressModalRef is not null)
        {
            await _prgressModalRef.ShowAsync();
        }
    }
}